// <auto-generated />
using System;
using IMIS.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IMIS.Persistence.Migrations
{
    [DbContext(typeof(ImisDbContext))]
    partial class ImisDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IMIS.Domain.AuditSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AuditTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("AuditSchedules");
                });

            modelBuilder.Entity("IMIS.Domain.AuditScheduleDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuditScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuditScheduleId");

                    b.HasIndex("OfficeId");

                    b.HasIndex("TeamId");

                    b.ToTable("AuditScheduleDetails");
                });

            modelBuilder.Entity("IMIS.Domain.AuditableOffices", b =>
                {
                    b.Property<int>("AuditScheduleId")
                        .HasColumnType("int");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.HasKey("AuditScheduleId", "OfficeId");

                    b.HasIndex("OfficeId");

                    b.ToTable("AuditableOffices");
                });

            modelBuilder.Entity("IMIS.Domain.Auditor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Auditors");
                });

            modelBuilder.Entity("IMIS.Domain.AuditorOffices", b =>
                {
                    b.Property<int>("AuditorId")
                        .HasColumnType("int");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOfficeHead")
                        .HasColumnType("bit");

                    b.HasKey("AuditorId", "OfficeId");

                    b.HasIndex("OfficeId");

                    b.ToTable("AuditorOffices");
                });

            modelBuilder.Entity("IMIS.Domain.AuditorTeams", b =>
                {
                    b.Property<int>("AuditorId")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTeamLeader")
                        .HasColumnType("bit");

                    b.HasKey("AuditorId", "TeamId");

                    b.HasIndex("TeamId");

                    b.ToTable("AuditorTeams");
                });

            modelBuilder.Entity("IMIS.Domain.KeyResultArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("KeyResultArea");
                });

            modelBuilder.Entity("IMIS.Domain.Office", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OfficeTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ParentOfficeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("OfficeTypeId");

                    b.HasIndex("ParentOfficeId");

                    b.ToTable("Offices");
                });

            modelBuilder.Entity("IMIS.Domain.OfficeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("OfficeType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Service"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Department"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Unit"
                        },
                        new
                        {
                            Id = 4,
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Section"
                        });
                });

            modelBuilder.Entity("IMIS.Domain.PerfomanceGovernanceSystem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<double>("PercentDeliverables")
                        .HasColumnType("float");

                    b.Property<int>("PgsPeriodId")
                        .HasColumnType("int");

                    b.Property<long?>("PgsReadinessRatingId")
                        .HasColumnType("bigint");

                    b.Property<string>("PgsStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PgsPeriodId");

                    b.HasIndex("PgsReadinessRatingId");

                    b.ToTable("PerformanceGovernanceSystem");
                });

            modelBuilder.Entity("IMIS.Domain.PgsDeliverable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ByWhen")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliverableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDirect")
                        .HasColumnType("bit");

                    b.Property<string>("KraDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("KraId")
                        .HasColumnType("int");

                    b.Property<double>("PercentDeliverables")
                        .HasColumnType("float");

                    b.Property<long>("PerfomanceGovernanceSystemId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KraId");

                    b.HasIndex("PerfomanceGovernanceSystemId");

                    b.ToTable("Deliverable");
                });

            modelBuilder.Entity("IMIS.Domain.PgsDeliverableScoreHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PgsDeliverableId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<double>("Score")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PgsDeliverableId");

                    b.ToTable("PgsDeliverableScoreHistories");
                });

            modelBuilder.Entity("IMIS.Domain.PgsPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("PgsPeriod");
                });

            modelBuilder.Entity("IMIS.Domain.PgsReadinessRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("CompetenceToDeliver")
                        .HasColumnType("float");

                    b.Property<double>("ConfidenceToDeliver")
                        .HasColumnType("float");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<double>("ResourceAvailability")
                        .HasColumnType("float");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("PgsReadiness");
                });

            modelBuilder.Entity("IMIS.Domain.PgsSignatory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateSigned")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("PgsId")
                        .HasColumnType("bigint");

                    b.Property<int>("PgsSignatoryTemplateId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SignatoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("PgsId");

                    b.HasIndex("PgsSignatoryTemplateId");

                    b.HasIndex("SignatoryId");

                    b.ToTable("PgsSignatory");
                });

            modelBuilder.Entity("IMIS.Domain.PgsSignatoryTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DefaultSignatoryId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<int>("OrderLevel")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("SignatoryLabel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultSignatoryId");

                    b.HasIndex("OfficeId");

                    b.ToTable("PgsSignatoryTemplate");
                });

            modelBuilder.Entity("IMIS.Domain.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("IMIS.Domain.UserOffices", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OfficeId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId");

                    b.ToTable("UserOffices");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "56996e97-9e8a-4d22-a693-c865144e9b96",
                            ConcurrencyStamp = "d7da037b-ab9f-4f98-84a4-7d0079a3df0b",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "8d9f58ec-a8b2-4738-9b5f-d5ce46f98b17",
                            ConcurrencyStamp = "205ea5a4-1708-4c31-9d5c-ada866cb2c4a",
                            Name = "Pgs Manager",
                            NormalizedName = "PGS MANAGER"
                        },
                        new
                        {
                            Id = "f7cf5c73-16d9-4da8-9e0a-cc149b34fbbd",
                            ConcurrencyStamp = "21dd1934-6c36-431c-8b5c-79265c6447fc",
                            Name = "Standard User",
                            NormalizedName = "PGS USER"
                        },
                        new
                        {
                            Id = "af7b586c7ee6490bbd878f46f6a47831",
                            ConcurrencyStamp = "324630b8-3833-4298-b42d-7ec4c11063b6",
                            Name = "Pgs Auditor",
                            NormalizedName = "PGS AUDITOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("IdentityUser");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = "f7cf5c73-16d9-4da8-9e0a-cc149b34fbbd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa2377f5-15cd-4d72-9d28-4de159a03847",
                            Email = "marcrejohncastillano@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "MARCREJOHNCASTILLANO@GMAIL.COM",
                            NormalizedUserName = "REDZ1029",
                            PasswordHash = "AQAAAAIAAYagAAAAEN61JwylqcI82aLBTgMdQyqwpsNRIktgf3QlRN663w7YVKgl+AGVRmNOjFZRDs9uaw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "132ae571-1a18-4de9-8fdb-5076e7231759",
                            TwoFactorEnabled = false,
                            UserName = "redz1029"
                        },
                        new
                        {
                            Id = "176bcfeb-f12a-4d42-b790-5d2312660801",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7879e496-2548-495d-9652-c26309b30d8a",
                            Email = "alondealexa2021@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ALONDEALEXA2021@GMAIL.COM",
                            NormalizedUserName = "ALYXX1988",
                            PasswordHash = "AQAAAAIAAYagAAAAEPrKs7IMN12/lV5p6ybP9GlkTTOmmlexDlKmNyDj8badLqZ9JLabo6vVMb+EU/iFFg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ed8ab9ae-1ac2-4f17-8400-8c29936d228b",
                            TwoFactorEnabled = false,
                            UserName = "alyxx1988"
                        },
                        new
                        {
                            Id = "fb385d60-eaee-4ea2-8bf1-b5cc0723c17a",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d9aefb81-c46b-4d9b-b943-6b1a6b1bc1ac",
                            Email = "CrossVampireNe0@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "CROSSVAMPIRENE0@GMAIL.COM",
                            NormalizedUserName = "DARKWIZWIZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ3zUVpRJCLBpBQk2pg2HbRhHPcknxmSS2LpB3e8E8yVv1exwQObDGiezTwoEyCZKA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8f7a4cc2-1af3-4124-8b4a-5e747fca0a5f",
                            TwoFactorEnabled = false,
                            UserName = "darkwizwiz"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "f7cf5c73-16d9-4da8-9e0a-cc149b34fbbd",
                            RoleId = "56996e97-9e8a-4d22-a693-c865144e9b96"
                        },
                        new
                        {
                            UserId = "176bcfeb-f12a-4d42-b790-5d2312660801",
                            RoleId = "56996e97-9e8a-4d22-a693-c865144e9b96"
                        },
                        new
                        {
                            UserId = "fb385d60-eaee-4ea2-8bf1-b5cc0723c17a",
                            RoleId = "56996e97-9e8a-4d22-a693-c865144e9b96"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("IMIS.Domain.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Position")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Suffix")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("IMIS.Domain.AuditScheduleDetails", b =>
                {
                    b.HasOne("IMIS.Domain.AuditSchedule", "AuditSchedule")
                        .WithMany("AuditSchduleDetails")
                        .HasForeignKey("AuditScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMIS.Domain.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMIS.Domain.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AuditSchedule");

                    b.Navigation("Office");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("IMIS.Domain.AuditableOffices", b =>
                {
                    b.HasOne("IMIS.Domain.AuditSchedule", "AuditSchedule")
                        .WithMany("AuditableOffices")
                        .HasForeignKey("AuditScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMIS.Domain.Office", "Office")
                        .WithMany("AuditableOffices")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AuditSchedule");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("IMIS.Domain.AuditorOffices", b =>
                {
                    b.HasOne("IMIS.Domain.Auditor", "Auditor")
                        .WithMany("AuditorOffices")
                        .HasForeignKey("AuditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMIS.Domain.Office", "Office")
                        .WithMany("AuditorOffices")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Auditor");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("IMIS.Domain.AuditorTeams", b =>
                {
                    b.HasOne("IMIS.Domain.Auditor", "Auditor")
                        .WithMany("AuditorTeams")
                        .HasForeignKey("AuditorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMIS.Domain.Team", "Team")
                        .WithMany("AuditorTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auditor");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("IMIS.Domain.Office", b =>
                {
                    b.HasOne("IMIS.Domain.OfficeType", "OfficeType")
                        .WithMany("Offices")
                        .HasForeignKey("OfficeTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMIS.Domain.Office", "ParentOffice")
                        .WithMany()
                        .HasForeignKey("ParentOfficeId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("OfficeType");

                    b.Navigation("ParentOffice");
                });

            modelBuilder.Entity("IMIS.Domain.PerfomanceGovernanceSystem", b =>
                {
                    b.HasOne("IMIS.Domain.Office", "Office")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMIS.Domain.PgsPeriod", "PgsPeriod")
                        .WithMany()
                        .HasForeignKey("PgsPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMIS.Domain.PgsReadinessRating", "PgsReadinessRating")
                        .WithMany()
                        .HasForeignKey("PgsReadinessRatingId");

                    b.Navigation("Office");

                    b.Navigation("PgsPeriod");

                    b.Navigation("PgsReadinessRating");
                });

            modelBuilder.Entity("IMIS.Domain.PgsDeliverable", b =>
                {
                    b.HasOne("IMIS.Domain.KeyResultArea", "Kra")
                        .WithMany()
                        .HasForeignKey("KraId");

                    b.HasOne("IMIS.Domain.PerfomanceGovernanceSystem", "PerfomanceGovernanceSystem")
                        .WithMany("PgsDeliverables")
                        .HasForeignKey("PerfomanceGovernanceSystemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kra");

                    b.Navigation("PerfomanceGovernanceSystem");
                });

            modelBuilder.Entity("IMIS.Domain.PgsDeliverableScoreHistory", b =>
                {
                    b.HasOne("IMIS.Domain.PgsDeliverable", null)
                        .WithMany("PgsDeliverableScoreHistory")
                        .HasForeignKey("PgsDeliverableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IMIS.Domain.PgsSignatory", b =>
                {
                    b.HasOne("IMIS.Domain.PerfomanceGovernanceSystem", "PerfomanceGovernanceSystem")
                        .WithMany("PgsSignatories")
                        .HasForeignKey("PgsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMIS.Domain.PgsSignatoryTemplate", "PgsSignatoryTemplate")
                        .WithMany()
                        .HasForeignKey("PgsSignatoryTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IMIS.Domain.User", "Signatory")
                        .WithMany()
                        .HasForeignKey("SignatoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerfomanceGovernanceSystem");

                    b.Navigation("PgsSignatoryTemplate");

                    b.Navigation("Signatory");
                });

            modelBuilder.Entity("IMIS.Domain.PgsSignatoryTemplate", b =>
                {
                    b.HasOne("IMIS.Domain.User", "DefaultSignatory")
                        .WithMany()
                        .HasForeignKey("DefaultSignatoryId");

                    b.HasOne("IMIS.Domain.Office", "Office")
                        .WithMany("SignatoryTemplates")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DefaultSignatory");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("IMIS.Domain.UserOffices", b =>
                {
                    b.HasOne("IMIS.Domain.Office", null)
                        .WithMany("UserOffices")
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IMIS.Domain.AuditSchedule", b =>
                {
                    b.Navigation("AuditSchduleDetails");

                    b.Navigation("AuditableOffices");
                });

            modelBuilder.Entity("IMIS.Domain.Auditor", b =>
                {
                    b.Navigation("AuditorOffices");

                    b.Navigation("AuditorTeams");
                });

            modelBuilder.Entity("IMIS.Domain.Office", b =>
                {
                    b.Navigation("AuditableOffices");

                    b.Navigation("AuditorOffices");

                    b.Navigation("SignatoryTemplates");

                    b.Navigation("UserOffices");
                });

            modelBuilder.Entity("IMIS.Domain.OfficeType", b =>
                {
                    b.Navigation("Offices");
                });

            modelBuilder.Entity("IMIS.Domain.PerfomanceGovernanceSystem", b =>
                {
                    b.Navigation("PgsDeliverables");

                    b.Navigation("PgsSignatories");
                });

            modelBuilder.Entity("IMIS.Domain.PgsDeliverable", b =>
                {
                    b.Navigation("PgsDeliverableScoreHistory");
                });

            modelBuilder.Entity("IMIS.Domain.Team", b =>
                {
                    b.Navigation("AuditorTeams");
                });
#pragma warning restore 612, 618
        }
    }
}
